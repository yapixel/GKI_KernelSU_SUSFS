name: Kernel Build Process
permissions:
  contents: write
  actions: write 

on:
  workflow_call:
    inputs:
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      revision:
        required: false
        type: string

jobs:
  build-gki:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      # # - name: Maximize Build Space
        # uses: AdityaGarg8/remove-unwanted-software@v5
        # with:
          # remove-dotnet: 'true'          # Frees ~2 GB
          # remove-android: 'true'         # Frees ~9 GB
          # remove-haskell: 'true'         # Frees ~5.2 GB
          # remove-codeql: 'true'          # Frees ~5.4 GB
          # remove-docker-images: 'true'   # Frees ~3.2 GB
          # remove-large-packages: 'true'  # Frees ~3.1 GB
          # remove-swapfile: 'true'        # Frees ~4 GB
          # remove-cached-tools: 'false'   # Avoid unless confirmed safe
          # verbose: 'true'                # Enable detailed logging
          
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV



      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt install -y libelf-dev libssl-dev build-essential
          
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait
          
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin:$PATH" >> $GITHUB_ENV
          
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          
          git clone https://github.com/WildKernels/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildKernels/kernel_patches.git

      - name: Initialize and Sync Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Extract Actual Sublevel for LTS Builds
        if: inputs.sub_level == 'X'
        run: |
          cd "$CONFIG/common"
          
          if [ -f "Makefile" ]; then
            ACTUAL_SUBLEVEL=$(grep '^SUBLEVEL = ' Makefile | awk '{print $3}')
            
            if [ -n "$ACTUAL_SUBLEVEL" ]; then
              OLD_CONFIG="$CONFIG"
              NEW_CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-$ACTUAL_SUBLEVEL"
              
              echo "CONFIG=$NEW_CONFIG" >> $GITHUB_ENV
              echo "ACTUAL_SUBLEVEL=$ACTUAL_SUBLEVEL" >> $GITHUB_ENV
              
              cd ../..
              if [ -d "$OLD_CONFIG" ]; then
                mv "$OLD_CONFIG" "$NEW_CONFIG"
              fi
            fi
          fi

      - name: Apply glibc 2.38 Compatibility Fix
        if: inputs.android_version == 'android14' && inputs.kernel_version == '6.1'
        run: |
          if [ ! -e build/build.sh ]; then 
            GLIBC_VERSION=$(ldd --version 2>/dev/null | head -n 1 | awk '{print $NF}') 
            if [ "$(printf '%s\n' "2.38" "$GLIBC_VERSION" | sort -V | head -n1)" = "2.38" ]; then 
              cd $CONFIG/common/ && sed -i '/\$(Q)\$(MAKE) -C \$(SUBCMD_SRC) OUTPUT=\$(abspath \$(dir \$@))\/ \$(abspath \$@)/s//$(Q)$(MAKE) -C $(SUBCMD_SRC) EXTRA_CFLAGS="$(CFLAGS)" OUTPUT=$(abspath $(dir $@))\/ $(abspath $@)/' tools/bpf/resolve_btfids/Makefile 2>/dev/null || true
            fi 
          fi

      - name: Fix Less Then 6.6.50 Builds
        if: inputs.android_version == 'android15' && inputs.kernel_version == '6.6'
        run: |
          cd "$CONFIG/common"
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
              sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
          fi

      - name: Apply ptrace patch for older kernels
        if: fromJSON(inputs.kernel_version) < 5.16
        run: |
          cd "$CONFIG/common"
          patch -p1 -F 3 < "../../kernel_patches/gki_ptrace.patch"

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild
          
      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          cd "$CONFIG"
          
          # Apply core SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch
          cd ..
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          # Apply KSU integration patches
          cd ./Wild_KSU
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
          
          # Apply compatibility fixes
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
          
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
          patch -p1 --forward < fix_rules.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
          patch -p1 --forward < fix_kernel_compat.c.patch

      - name: Getting KernelSU Version
        run: |
          cd "$CONFIG/Wild_KSU/kernel"
          BASE_VERSION=10200
          COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
          KSU_VERSION=$(expr $COMMIT_COUNT "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          
      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          cp ../../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Apply Hide Stuff Patches
        run: |
          cd "$CONFIG/common"
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 --forward -F 3 < 69_hide_stuff.patch

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: Apply Kernel Configuration
        run: |
          cd "$CONFIG"
          
          defconfig="./common/arch/arm64/configs/gki_defconfig"
          
          echo "Applying kernel configurations one by one..."
          
          # KernelSU Core Configuration
          echo "CONFIG_KSU=y" >> "$defconfig"
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$defconfig"
          
          # Mountify Support
          echo "CONFIG_TMPFS_XATTR=y" >> "$defconfig"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$defconfig"
          
          # Networking Configuration
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$defconfig"
          
          # BBR TCP Congestion Control
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$defconfig"
          echo "CONFIG_NET_SCH_FQ=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$defconfig"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$defconfig"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$defconfig"
          
          # IPSet support
          echo "CONFIG_IP_SET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_MAX=256" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "$defconfig"
          echo "CONFIG_NETFILTER_XT_MATCH_SET=y" >> "$defconfig"
          # SUSFS Configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$defconfig"
          
          # SUSFS Auto Mount Features
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$defconfig"
          
          # SUSFS Advanced Features
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$defconfig"
          
          # SUSFS Debugging and Security
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$defconfig"
          
          # Build Optimization Configuration
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$defconfig"
          echo "CONFIG_LTO_CLANG=y" >> "$defconfig"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$defconfig"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "$defconfig"
          
          # Remove check_defconfig
          #sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"
          
          perl -pi -e 's/-dirty//' ./common/scripts/setlocalversion
          
          #Set Kernel Timestamp
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sun Apr 20 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h
          
          #Set Kernel Name
          if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            perl -0777 -pi -e 's/(echo "\$\{KERNELVERSION\}\$\{file_localversion\}\$\{config_localversion\}\$\{LOCALVERSION\}\$\{scm_version\}")/echo "\$\{KERNELVERSION\}\$\{file_localversion\}\$\{config_localversion\}\$\{LOCALVERSION\}\$\{scm_version\}-🟢-Wild"/s' ./common/scripts/setlocalversion
          else
            perl -0777 -pi -e 's/(echo "\$res")/echo "\$res-🟢-Wild"/s' ./common/scripts/setlocalversion
          fi

          #Set Kernel Timestamp
          perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Sun Apr 20 04:20:00 UTC 2025"/' ./common/init/Makefile
              
          #Remove Abi Exports and Error
          rm -rf ./common/android/abi_gki_protected_exports_*
          #perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel

      - name: Detect Clang Version from Configs
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          DEFCONFIG="$KERNEL_PATH/common/arch/arm64/configs/gki_defconfig"
          BUILDCONFIG="$KERNEL_PATH/common/build.config.gki"
          CONSTANTSCONFIG="$KERNEL_PATH/common/build.config.constants"
          CLANG_VERSION=""
          CLANG_BIN_PATH=""
          if grep -q '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null; then
            CLANG_VERSION=$(grep '^CONFIG_CLANG_VERSION=' "$DEFCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | tr -d '"' | xargs)
          elif grep -q '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null; then
            CLANG_VERSION=$(grep '^CLANG_VERSION=' "$BUILDCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
          elif grep -q '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null; then
            CLANG_VERSION=$(grep '^CLANG_VERSION=' "$CONSTANTSCONFIG" 2>/dev/null | head -n1 | cut -d'=' -f2 | xargs)
            CLANG_VERSION="clang-$CLANG_VERSION"
          else
            echo "No clang version found in config, will auto-detect in prebuilts."
          fi
          if [ -z "$CLANG_VERSION" ]; then
            if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
              CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
            elif [ -d "$KERNEL_PATH/prebuilts-master/clang/host/linux-x86" ]; then
              CLANG_VERSION=$(ls -d "$KERNEL_PATH"/prebuilts-master/clang/host/linux-x86/clang-r*/ | tail -n 1 | xargs basename)
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
            else
              CLANG_VERSION="clang"
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin" # dummy
            fi
          else
            if [ -d "$KERNEL_PATH/prebuilts/clang/host/linux-x86" ]; then
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts/clang/host/linux-x86/$CLANG_VERSION/bin"
            else
              CLANG_BIN_PATH="$KERNEL_PATH/prebuilts-master/clang/host/linux-x86/$CLANG_VERSION/bin"
            fi
          fi
          echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
          echo "CLANG_BIN_PATH=$CLANG_BIN_PATH" >> $GITHUB_ENV


      - name: Build Kernel
        run: |
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          CLANG_BIN_PATH="${{ env.CLANG_BIN_PATH }}"
          CLANG_VERSION="${{ env.CLANG_VERSION }}"
          
          if [ -d "$CLANG_BIN_PATH" ] && [ -x "$CLANG_BIN_PATH/clang" ]; then
            export PATH="$CLANG_BIN_PATH:$PATH"
            SELECTED_CLANG="$CLANG_BIN_PATH/clang"
          elif command -v clang >/dev/null 2>&1; then
            SELECTED_CLANG="$(command -v clang)"
            exit 1
          else
            exit 1
          fi
          
          LLVM_TOOLS="clang ld.lld llvm-ar llvm-objcopy llvm-objdump llvm-nm"
          MISSING_TOOLS=""
          for tool in $LLVM_TOOLS; do
            if ! command -v $tool >/dev/null 2>&1; then
              MISSING_TOOLS="$MISSING_TOOLS $tool"
            fi
          done
          
          if [ -n "$MISSING_TOOLS" ]; then
            sudo apt-get update
            sudo apt-get install -yq --no-install-recommends llvm
            for tool in $MISSING_TOOLS; do
              if ! command -v $tool >/dev/null 2>&1; then
                exit 1
              fi
            done
          fi
          
          KERNEL_VERSION="${{ inputs.kernel_version }}"
          if [[ "$KERNEL_VERSION" == "5.10" ]]; then
            USE_LLVM_IAS=true
          fi
          
          cd "$KERNEL_PATH/common" || exit 1
          
          MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- \
            RUSTC=$KERNEL_PATH/prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=$KERNEL_PATH/prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld"
          if [[ -v USE_LLVM_IAS ]]; then
            MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          fi
          
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" gki_defconfig Image Image.gz Image.lz4 || exit 1
          
          make -j$(nproc --all) O=out $MAKE_ARGS KCFLAGS+="-Wno-error -O2 -flto=thin -fno-stack-protector" || exit 1

      - name: Create Kernel ZIP
        run: |
          cp $CONFIG/common/out/arch/arm64/boot/Image AnyKernel3/Image

          cd AnyKernel3
          
          # Use actual sublevel for LTS builds if available
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi
          
          ZIP_NAME="WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-AnyKernel3.zip"
          zip -r "../$ZIP_NAME" ./*

      - name: Create Bootimgs Folder and Copy Images
        run: |
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp $CONFIG/common/out/arch/arm64/boot/Image ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image.gz ./bootimgs
          cp $CONFIG/common/out/arch/arm64/boot/Image.lz4 ./bootimgs

      - name: Android 12 boot image build script
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd bootimgs
          
          # Prepare sublevel for naming
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi
          
          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          
          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi
          
          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip
          
          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"
          
          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"
          
          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot.img
          
          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot-gz.img
          
          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot-lz4.img

      - name: Android 13/14/15 boot image build script
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          cd bootimgs

          # Prepare sublevel for naming
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi
          
          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot.img
          
          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot-gz.img
          
          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-boot-lz4.img
          
      - name: Upload Build Artifacts
        run: |
          # Prepare sublevel for naming
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.KSUVER }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}
          path: |
            *.zip
